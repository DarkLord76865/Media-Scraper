name: Release

on:
  workflow_dispatch:

jobs:
  build-linux:
    name: Build Linux binary
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      name: Checkout repository

    - uses: actions/setup-python@v4
      name: Setup Python
      with:
        python-version: '3.11'

    - name: Install requirements
      run: pip install -r requirements.txt

    - name: Get version
      id: get_version
      run: |
        VERSION_NUM=$(python build.py --version)
        echo "VERSION_NUM=${VERSION_NUM}" >> $GITHUB_OUTPUT

    - name: Package binary
      run: python build.py

    - name: Rename binary
      run: mv "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}" "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-linux-x86_64"

    - name: Compress binary
      run: tar -a -c -v -f "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-linux-x86_64.zip" "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-linux-x86_64"

    - uses: actions/upload-artifact@v3
      name: Upload binary artifact
      with:
        name: linux-binary
        retention-days: 1
        path: "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-linux-x86_64.zip"
  
  build-macos:
    name: Build macOS binary
    runs-on: macos-latest

    steps:
    - uses: actions/checkout@v3
      name: Checkout repository

    - uses: actions/setup-python@v4
      name: Setup Python
      with:
        python-version: '3.11'

    - name: Install requirements
      run: pip install -r requirements.txt

    - name: Get version
      id: get_version
      run: |
        VERSION_NUM=$(python build.py --version)
        echo "VERSION_NUM=${VERSION_NUM}" >> $GITHUB_OUTPUT

    - name: Package binary
      run: python build.py

    - name: Rename binary
      run: mv "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}.app" "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-macos-x86_64.app"

    - name: Compress binary
      run: tar -a -c -v -f "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-macos-x86_64.zip" "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-macos-x86_64.app"

    - uses: actions/upload-artifact@v3
      name: Upload binary artifact
      with:
        name: macos-binary
        retention-days: 1
        path: "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-macos-x86_64.zip"
  
  build-windows:
    name: Build Windows binary
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
      name: Checkout repository

    - uses: actions/setup-python@v4
      name: Setup Python
      with:
        python-version: '3.11'

    - name: Install requirements
      run: pip install -r requirements.txt

    - name: Get version
      shell: bash
      id: get_version
      run: |
        VERSION_NUM=$(python build.py --version)
        echo "VERSION_NUM=${VERSION_NUM}" >> $GITHUB_OUTPUT

    - name: Package binary
      run: python build.py

    - name: Rename binary
      shell: bash
      run: mv "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}.exe" "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-windows-x86_64.exe"

    - name: Compress binary
      run: tar -a -c -v -f "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-windows-x86_64.zip" "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-windows-x86_64.exe"

    - uses: actions/upload-artifact@v3
      name: Upload binary artifact
      with:
          name: windows-binary
          retention-days: 1
          path: "${{ github.event.repository.name }}-v${{ steps.get_version.outputs.VERSION_NUM }}-windows-x86_64.zip"
  
  publish-release:
    name: Publish GitHub release
    runs-on: ubuntu-latest
    needs:
      [build-linux, build-macos, build-windows]

    steps:
    - uses: actions/checkout@v3
      name: Checkout repository

    - uses: actions/setup-python@v4
      name: Setup Python
      with:
        python-version: '3.11'

    - name: Install requirements
      run: pip install -r requirements.txt

    - name: Get version
      id: get_version
      run: echo "VERSION_NUM=$(python build.py --version)" >> $GITHUB_OUTPUT

    - run: echo "test123"
